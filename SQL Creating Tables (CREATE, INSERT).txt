# to create a table (full general syntax):
CREATE TABLE table_name (
 column_name TYPE column_constraint,
 column_name TYPE column_constraint,
  table_constraint table_constraint
) INHERITS existing_table_name; 

# SERIAL: Creates a sequence object and sets next value generated by the sequence as the default value for the column;
  Great for a primary key: it logs unique integer entries automatically upon insertion.
  If a row is ever removed, column with SERIAL data type will not adjust, so you know which row was removed 
 
# example:
CREATE TABLE gpu(
 gpu_id SERIAL PRIMARY KEY,
 price SMALLINT NOT NULL
); 

CREATE TABLE account(
 user_id SERIAL PRIMARY KEY,
 username VARCHAR(50) UNIQUE NOT NULL,
  password VARCHAR(50) NOT NULL,
  email VARCHAR(250) UNIQUE NOT NULL,
  created_on TIMESTAMP NOT NULL,
  last_login TIMESTAMP
);

# example with REFERENCES
CREATE TABLE account_job(
 user_id INTEGER REFERENCES account(user_id),
 job_id INTEGER REFERENCES job(job_id),
 hire_date TIMESTAMP
);

# syntax for adding rows to a table:
INSERT INTO table(column1, column2, ...)
VALUES
 (value1, value2, ...),
 (value1, value2, ...), ...; 

# syntax for inserting values from another table
INSERT INTO table(column1, column2, ...)
SELECT column1,column2,...
FROM another_table
WHERE condition;

# inserted row values must match up (including constraints) for the table
# SERIAL columns do not need to be given a value

# going back to the examples:
INSERT INTO account(username,password,email,create_on)
VALUES
('Mason','password','proxy@mail.com',CURRENT_TIMESTAMP)

INSERT INTO job(job_name)
VALUES
('Data Analyst')

INSERT INTO job(job_name)
VALUES
('Accountant')

INSERT INTO account_job(user_id,job_id,hire_date)
VALUES
(1,1,CURRENT_TIMESTAMP)
