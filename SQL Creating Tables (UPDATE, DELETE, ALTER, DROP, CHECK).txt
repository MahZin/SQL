# syntax to change values of a column(s) in a table:
UPDATE table
SET column1 = value1,
 column2=value2,...
WHERE
 condition;

# example:
UPDATE account
SET last_login = CURRENT_TIMESTAMP
 WHERE last_login IS NULL;

# to reset everything without WHERE condition:
UPDATE account
SET last_login = CURRENT_TIMESTAMP

# set based on another column
UPDATE account
SET last_login = created_on

# use another table's values:
UPDATE TableA
SET original_col = TableB.new_col
FROM TableB
WHERE TableA.id = TableB.id

# to return the affected rows
UPDATE account
SET last_login = created_on
RETURNING account_id,last_login

# example of updating a column with another column
UPDATE account_job
SET hire_date = account.created_on
FROM account
WHERE account_job.user_id = account.user_id

# example of updating a column with timestamp and returning affected values
UPDATE account
SET last_login = CURRENT_TIMESTAMP
RETURNING email,created_on,last_login

# to remove rows from a table:
DELETE FROM table
WHERE row_id = 1

# to delete rows based on their presence in other tables:
DELETE FROM tableA
using tableB
WHERE tableA.id = tableB.id

# example:
INSERT INTO job(job_name)
VALUES
 ('Streamer')

DELETE FROM job
WHERE job_name = 'Streamer'
RETURNING job_id, job_name

# ALTER - changes for: 
	Adding, dropping, renaming columns 
	Changing a column's data type 
	Set DEFAULT values for a column
	Add CHECK constraints
	Rename table

# to add columns:
ALTER TABLE table_name
ADD COLUMN new_col TYPE

# to alter constraints:
ALTER TABLE table_name
ALTER COLUMN col_name
SET DEFAULT value

ALTER TABLE table_name
ALTER COLUMN col_name
SET NOT NULL

ALTER TABLE table_name
ALTER COLUMN col_name
DROP NOT NULL


ALTER TABLE table_name
ALTER COLUMN col_name
ADD CONSTRAINT constraint_name

# create a table as an example
CREATE TABLE information(
 info_id SERIAL PRIMARY KEY,
  title VARCHAR(500) NOT NULL,
  person VARCHAR(50) NOT NULL UNIQUE
)

# rename the table
ALTER TABLE information
RENAME TO new_info

# rename a column
ALTER TABLE new_info
RENAME COLUMN person to people

# this following command will not work; violates NOT NULL constraint
INSERT INTO new_info(title)
VALUES
('arbitrary new title')

# we can either add in people and add a value for it, or remove NOT NULL constraint (this option affects the entire table)
ALTER TABLE new_info
ALTER COLUMN people DROP NOT NULL

# now we can use the previous command
INSERT INTO new_info(title)
VALUES
('arbitrary new title')

# to completely remove a column in a table including all of its indexes and constraints
# exceptions are columns used in views, triggers, or stored procedures unless we also use CASCADE clause
ALTER TABLE table_name
DROP COLUMN col_name

# to remove all dependencies:
ALTER TABLE table_name
DROP COLUMN col_name CASCADE

# to check for existence in order to avoid errors
ALTER TABLE table_name
DROP COLUMN IF EXISTS col_name

# to drop multiple columns
ALTER TABLE table_name
DROP COLUMN col_one,
DROP COLUMN col_two

# example
ALTER TABLE new_info
DROP COLUMN people

ALTER TABLE new_info
DROP COLUMN IF EXISTS people

# CHECK constraint: used to create more customized constraints subject to a certain condition(s)
# i.e. all inserted integer values must fall below a certain threshold
CREATE TABLE example(
 ex_id SERIAL PRIMARY KEY,
 age SMALLINT CHECK(age > 21),
 parent_age SMALLINT CHECK(parent_age > age)
); 

# example
CREATE TABLE employees(
 emp_id SERIAL PRIMARY KEY, 
 first_name VARCHAR(50) NOT NULL,
 last_name VARCHAR(50) NOT NULL,
 birthdate DATE CHECK (birthdate > '1900-01-01'),
 hire_date DATE CHECK (hire_date > birthdate),
 salary INTEGER CHECK (salary > 0)
);

INSERT INTO employees(
 first_name,
 last_name,
 birthdate,
 hire_date,
 salary
)
VALUES
 ('Mason',
  'Nguyen',
  '1899-11-03',
  '2020-01-01',
  250
)

# the above code will have an ERROR as it violates a check constraint

CREATE TABLE employees(
 emp_id SERIAL PRIMARY KEY, 
 first_name VARCHAR(50) NOT NULL,
 last_name VARCHAR(50) NOT NULL,
 birthdate DATE CHECK (birthdate > '1900-01-01'),
 hire_date DATE CHECK (hire_date > birthdate),
 salary INTEGER CHECK (salary > 0)
);

INSERT INTO employees(
 first_name,
 last_name,
 birthdate,
 hire_date,
 salary
)
VALUES
 ('Mason',
  'Nguyen',
  '1990-06-06',
  '2020-01-01',
  250
)

# the above code works!